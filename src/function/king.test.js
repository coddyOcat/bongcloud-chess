import {
	addBlock,
	addLineBlock,
	BishopBlock,
	checkInBlock,
	checkKingCheckmate,
	checkKingMoved,
	EnemyBlock,
	KingBlock,
	KingMove,
	KnightBlock,
	listKingTarget,
	PawnBlock,
	QueenBlock,
	RookBlock
} from "./king";

import * as funz from "./func"

it("Add line block", () => {
	let listBlock = ["a1"]
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let listBlockz = addLineBlock(listBlock, position)
	expect(listBlock.length).toEqual(1);

	listBlock = ["a3"]
	listBlockz = addLineBlock(listBlock, position)
	expect(listBlock.length).toEqual(1);

	listBlock = ["a"]
	listBlockz = addLineBlock(listBlock, position)
	expect(listBlock.length).toEqual(1);
})

it("Add block", () => {
	let listBlock = ["a1"]
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let listBlockz
	listBlockz = addBlock(listBlock, position)
	expect(listBlock.length).toEqual(1);

	listBlock = ["a3"]
	listBlockz = addBlock(listBlock, position)
	expect(listBlock.length).toEqual(1);

	listBlock = ["a"]
	listBlockz = addBlock(listBlock, position)
	expect(listBlock.length).toEqual(1);
})

it("Pawn block", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let square = "a1"
	let side = "white"
	let listBlockz

	listBlockz = PawnBlock(square, side, position)
	expect(listBlockz.length).toEqual(1);

	side = "black"
	listBlockz = PawnBlock(square, side, position)
	expect(listBlockz.length).toEqual(0);
})

it("Rook block", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let square = "b4"
	let side = "white"
	let listBlockz

	listBlockz = RookBlock(square, side, position)
	expect(listBlockz.length).toEqual(12);
})

it("Bishop block", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let square = "b4"
	let side = "white"
	let listBlockz

	listBlockz = BishopBlock(square, side, position)
	expect(listBlockz.length).toEqual(7);
})

it("Knight block", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let square = "b4"
	let side = "white"
	let listBlockz

	listBlockz = KnightBlock(square, side, position)
	expect(listBlockz.length).toEqual(6);
})

it("Queen block", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let square = "b4"
	let side = "white"
	let listBlockz

	listBlockz = QueenBlock(square, side, position)
	expect(listBlockz.length).toEqual(19);
})

it("King block", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let square = "b4"
	let side = "white"
	let listBlockz

	listBlockz = KingBlock(square, side, position)
	expect(listBlockz.length).toEqual(8);
})

it("King move", () => {
	jest.spyOn(funz, 'addJumpMove').mockReturnValue("")
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let square = "b4"
	let side = "white"
	let listTargetS
	let setPosition = jest.fn()
	let setLastMove = jest.fn()

	KingMove(square, listTargetS, position, side, setPosition, setLastMove);
	// expert !!
})

it("Enemy block", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let side = "white"
	let listBlocks
	listBlocks = EnemyBlock(side, position)
	expect(listBlocks.length).toEqual(38);

	side = "black"
	listBlocks = EnemyBlock(side, position)
	expect(listBlocks.length).toEqual(38);
})

it("Check in block", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let side = "white"
	checkInBlock("b5", side, position)
	checkInBlock("b7", side, position)
})

it("Check king checkmate", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let side = "white"
	let setPosition = jest.fn()
	let setLastMove = jest.fn()

	expect(checkKingCheckmate(side, position, setPosition, setLastMove, "qc1")).toEqual(false)
})

it("Check King moved", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let side = "white"
	let setMovedKing = jest.fn()
	position["e1"] = "1"
	position["d1"] = "K"

	checkKingMoved(side, position, setMovedKing)
	expect(setMovedKing).toHaveBeenCalledTimes(1);

	side = "black"
	position["e1"] = "K"
	position["d1"] = "1"
	position["e8"] = "1"
	position["d8"] = "k"

	checkKingMoved(side, position, setMovedKing)
	expect(setMovedKing).toHaveBeenCalledTimes(2);
})


it("List King target", () => {
	let position = {
		a1: "R",
		a2: "P",
		a3: "1",
		a4: "1",
		a5: "1",
		a6: "1",
		a7: "p",
		a8: "r",
		b1: "N",
		b2: "P",
		b3: "1",
		b4: "1",
		b5: "1",
		b6: "1",
		b7: "p",
		b8: "n",
		c1: "B",
		c2: "P",
		c3: "1",
		c4: "1",
		c5: "1",
		c6: "1",
		c7: "p",
		c8: "b",
		d1: "Q",
		d2: "P",
		d3: "1",
		d4: "1",
		d5: "1",
		d6: "1",
		d7: "p",
		d8: "q",
		e1: "K",
		e2: "P",
		e3: "1",
		e4: "1",
		e5: "1",
		e6: "1",
		e7: "p",
		e8: "k",
		f1: "B",
		f2: "P",
		f3: "1",
		f4: "1",
		f5: "1",
		f6: "1",
		f7: "p",
		f8: "b",
		g1: "N",
		g2: "P",
		g3: "1",
		g4: "1",
		g5: "1",
		g6: "1",
		g7: "p",
		g8: "n",
		h1: "R",
		h2: "P",
		h3: "1",
		h4: "1",
		h5: "1",
		h6: "1",
		h7: "p",
		h8: "r",
	};
	let setPosition = jest.fn()
	let setLastMove = jest.fn()

	let listTargetS = listKingTarget("e6", "k", position, setPosition, setLastMove);
	expect(listTargetS.length).toEqual(0)
})